{"mappings":"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","sources":["index.ts"],"sourcesContent":["const container = document.querySelector(\".container\");\n\ntype PokemonListResponse = {\n  results: LitePokemon[];\n};\n\ntype LitePokemon = {\n  name: string;\n  url: string;\n};\n\nfunction getColorFromType(type: string) {\n  if (type === \"grass\") {\n    return \"grass\";\n  }\n\n  if (type === \"fire\") {\n    return \"red\";\n  }\n\n  if (type === \"water\") {\n    return \"blue\";\n  }\n\n  if (type === \"bug\") {\n    return \"bug\";\n  }\n\n  if (type === \"normal\") {\n    return \"gray\";\n  }\n\n  if (type === \"poison\") {\n    return \"purple\";\n  }\n\n  if (type === \"electric\") {\n    return \"electric\";\n  }\n\n  if (type === \"fairy\") {\n    return \"pink\";\n  }\n\n  if (type === \"ground\") {\n    return \"ground\";\n  }\n\n  if (type === \"ice\") {\n    return \"ice\";\n  }\n\n  if (type === \"fighting\") {\n    return \"fighting\";\n  }\n\n  if (type === \"flying\") {\n    return \"flying\";\n  }\n\n  if (type === \"psychic\") {\n    return \"psychic\";\n  }\n  if (type === \"rock\") {\n    return \"rock\";\n  }\n  if (type === \"ghost\") {\n    return \"ghost\";\n  }\n  if (type === \"steel\") {\n    return \"stell\";\n  }\n  if (type === \"dragon\") {\n    return \"dragon\";\n  }\n\n  return \"black\";\n}\n\nasync function printResult() {\n  const apiURL = \"https://pokeapi.co/api/v2/pokemon?limit=150&offset=0\";\n\n  let response = await fetch(apiURL);\n  let json: PokemonListResponse = await response.json();\n\n  const jsonArray = json.results;\n\n  const unresolvedPokemons: Promise<Response>[] = [];\n\n  for (let i = 0; i < jsonArray.length; i++) {\n    const pokemon = jsonArray[i];\n\n    const apiPersonaje = `https://pokeapi.co/api/v2/pokemon/${pokemon.name}`;\n\n    const unresolvedReq = fetch(apiPersonaje);\n    unresolvedPokemons.push(unresolvedReq);\n  }\n\n  const resolvedPokemons = await Promise.all(unresolvedPokemons);\n\n  for (let i = 0; i < resolvedPokemons.length; i++) {\n    const currentPokemon = resolvedPokemons[i];\n\n    const finalPokemon = await currentPokemon.json();\n\n    printCard(finalPokemon);\n  }\n}\n\nprintResult();\n\nfunction capitalize(word: string) {\n  return word[0].toUpperCase() + word.slice(1);\n}\n\nfunction printCard(pokemon) {\n  const paddedId = String(pokemon.id).padStart(3, \"0\");\n\n  const pokemonCard = document.createElement(\"a\");\n  pokemonCard.classList.add(\"pokemon-card\");\n  pokemonCard.href = \"./pokemon.html\";\n  container?.appendChild(pokemonCard);\n\n  const img = document.createElement(\"img\");\n  img.classList.add(\"cardImg\");\n  img.src = `https://assets.pokemon.com/assets/cms2/img/pokedex/full/${paddedId}.png`;\n  pokemonCard.appendChild(img);\n\n  const pokemonName = document.createElement(\"p\");\n  pokemonName.classList.add(\"pokemon-name\");\n  pokemonName.innerHTML = capitalize(pokemon.name);\n  pokemonCard.appendChild(pokemonName);\n\n  const typeDiv = document.createElement(\"div\");\n  typeDiv.classList.add(\"typeDiv\");\n  pokemonCard.appendChild(typeDiv);\n\n  const firstPokemonType = pokemon.types[0];\n  const typeColor = getColorFromType(firstPokemonType.type.name);\n  pokemonCard.classList.add(typeColor);\n\n  const pokemonTypes = pokemon.types;\n\n  for (let i = 0; i < pokemonTypes.length; i++) {\n    const element = pokemonTypes[i];\n\n    console.log(element.type.name);\n\n    const pokemonTypeCard = document.createElement(\"p\");\n    pokemonTypeCard.classList.add(\"pokemon-type\");\n    pokemonTypeCard.innerHTML = element.type.name;\n    typeDiv.appendChild(pokemonTypeCard);\n  }\n}\n// fetch de las cosas\n\n// const result:PokemonListResponse[] = response.results\n"],"names":[],"version":3,"file":"index.242b51c6.js.map","sourceRoot":"/__parcel_source_root/"}